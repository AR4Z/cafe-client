{"remainingRequest":"/home/ar4z/Projects/cafe/ui/cafe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ar4z/Projects/cafe/ui/cafe/src/components/HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ar4z/Projects/cafe/ui/cafe/src/components/HelloWorld.vue","mtime":1555597577936},{"path":"/home/ar4z/Projects/cafe/ui/cafe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ar4z/Projects/cafe/ui/cafe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ar4z/Projects/cafe/ui/cafe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ar4z/Projects/cafe/ui/cafe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\nconst exhale = ms =>\n  new Promise(resolve => setTimeout(resolve, ms))\nexport default {\n  data: () => ({\n    checking: false,\n    heartbeats: []\n  }),\n  computed: {\n    avg () {\n      const sum = this.heartbeats.reduce((acc, cur) => acc + cur, 0)\n      const length = this.heartbeats.length\n      if (!sum && !length) return 0\n      return Math.ceil(sum / length)\n    }\n  },\n  created () {\n    this.takePulse(false)\n  },\n  methods: {\n    heartbeat () {\n      return Math.ceil(Math.random() * (120 - 80) + 80)\n    },\n    async takePulse (inhale = true) {\n      this.checking = true\n      inhale && await exhale(1000)\n      this.heartbeats = Array.from({ length: 20 }, this.heartbeat)\n      this.checking = false\n    }\n  }\n}\n",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  \n</template>\n<script>\n  const exhale = ms =>\n    new Promise(resolve => setTimeout(resolve, ms))\n  export default {\n    data: () => ({\n      checking: false,\n      heartbeats: []\n    }),\n    computed: {\n      avg () {\n        const sum = this.heartbeats.reduce((acc, cur) => acc + cur, 0)\n        const length = this.heartbeats.length\n        if (!sum && !length) return 0\n        return Math.ceil(sum / length)\n      }\n    },\n    created () {\n      this.takePulse(false)\n    },\n    methods: {\n      heartbeat () {\n        return Math.ceil(Math.random() * (120 - 80) + 80)\n      },\n      async takePulse (inhale = true) {\n        this.checking = true\n        inhale && await exhale(1000)\n        this.heartbeats = Array.from({ length: 20 }, this.heartbeat)\n        this.checking = false\n      }\n    }\n  }\n</script>"]}]}